<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.3.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="4.8.6" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.7" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="Eprover" version="2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="5" name="Alt-Ergo" version="2.0.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="6" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="7" name="CVC4" version="1.7" alternative="strings+counterexamples" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="file_system_mario.mlw"/>
<theory name="FileSystem">
 <goal name="append_empty" proved="true">
 <proof prover="2" timelimit="1"><result status="valid" time="0.08"/></proof>
 </goal>
 <goal name="empty_length" proved="true">
 <proof prover="2"><result status="valid" time="0.12"/></proof>
 </goal>
 <goal name="trans_path" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="trans_path.0" proved="true">
  <transf name="unfold" proved="true" arg1="path">
   <goal name="trans_path.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="trans_path.0.0.0" proved="true">
    <transf name="case" proved="true" arg1="(length pth1 = 0)">
     <goal name="trans_path.0.0.0.0" expl="true case" proved="true">
     <transf name="case" proved="true" arg1="(length pth2 = 0)">
      <goal name="trans_path.0.0.0.0.0" expl="true case" proved="true">
      <proof prover="2"><result status="valid" time="0.12"/></proof>
      </goal>
      <goal name="trans_path.0.0.0.0.1" expl="false case (true case)" proved="true">
      <transf name="right" proved="true" >
       <goal name="trans_path.0.0.0.0.1.0" expl="right case" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="trans_path.0.0.0.0.1.0.0" proved="true">
        <proof prover="2"><result status="valid" time="0.15"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.0.1.0.1" proved="true">
        <proof prover="2"><result status="valid" time="0.19"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.0.1.0.2" proved="true">
        <proof prover="2"><result status="valid" time="0.30"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.0.1.0.3" proved="true">
        <proof prover="2"><result status="valid" time="0.22"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.0.1.0.4" proved="true">
        <proof prover="2"><result status="valid" time="0.17"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.0.1.0.5" proved="true">
        <proof prover="2"><result status="valid" time="0.14"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="trans_path.0.0.0.1" expl="false case" proved="true">
     <transf name="right" proved="true" >
      <goal name="trans_path.0.0.0.1.0" expl="right case" proved="true">
      <transf name="case" proved="true" arg1="(length pth2 = 0)">
       <goal name="trans_path.0.0.0.1.0.0" expl="right case (true case)" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="trans_path.0.0.0.1.0.0.0" proved="true">
        <proof prover="2"><result status="valid" time="0.14"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.1.0.0.1" proved="true">
        <proof prover="2"><result status="valid" time="0.13"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.1.0.0.2" proved="true">
        <transf name="replace" proved="true" arg1="(pth1 ++ pth2)" arg2="pth1">
         <goal name="trans_path.0.0.0.1.0.0.2.0" proved="true">
         <transf name="unfold" proved="true" arg1="path" arg2="in" arg3="H3">
          <goal name="trans_path.0.0.0.1.0.0.2.0.0" proved="true">
          <transf name="eliminate_let_fmla" proved="true" >
           <goal name="trans_path.0.0.0.1.0.0.2.0.0.0" proved="true">
           <transf name="destruct" proved="true" arg1="H3">
            <goal name="trans_path.0.0.0.1.0.0.2.0.0.0.0" proved="true">
            <transf name="replace" proved="true" arg1="until" arg2="middle">
             <goal name="trans_path.0.0.0.1.0.0.2.0.0.0.0.0" proved="true">
             <transf name="unfold" proved="true" arg1="path" arg2="in" arg3="H4">
              <goal name="trans_path.0.0.0.1.0.0.2.0.0.0.0.0.0" proved="true">
              <transf name="assert" proved="true" arg1="(length pth1 = n)">
               <goal name="trans_path.0.0.0.1.0.0.2.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
               <proof prover="2"><result status="valid" time="0.15"/></proof>
               </goal>
               <goal name="trans_path.0.0.0.1.0.0.2.0.0.0.0.0.0.1" proved="true">
               <proof prover="2"><result status="valid" time="0.11"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="trans_path.0.0.0.1.0.0.2.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="2"><result status="valid" time="0.07"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="trans_path.0.0.0.1.0.0.2.0.0.0.1" proved="true">
            <proof prover="2"><result status="valid" time="0.07"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="trans_path.0.0.0.1.0.0.2.1" expl="equality hypothesis" proved="true">
         <transf name="assert" proved="true" arg1="(pth2 = empty)">
          <goal name="trans_path.0.0.0.1.0.0.2.1.0" expl="asserted formula" proved="true">
          <proof prover="2"><result status="valid" time="0.12"/></proof>
          </goal>
          <goal name="trans_path.0.0.0.1.0.0.2.1.1" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="0.09"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="trans_path.0.0.0.1.0.0.3" proved="true">
        <proof prover="2"><result status="valid" time="0.23"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.1.0.0.4" proved="true">
        <proof prover="2"><result status="valid" time="0.16"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.1.0.0.5" proved="true">
        <proof prover="2"><result status="valid" time="0.15"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="trans_path.0.0.0.1.0.1" expl="right case (false case)" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="trans_path.0.0.0.1.0.1.0" proved="true">
        <proof prover="2"><result status="valid" time="0.14"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.1.0.1.1" proved="true">
        <proof prover="2"><result status="valid" time="0.14"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.1.0.1.2" proved="true">
        <proof prover="2"><result status="valid" time="1.92"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.1.0.1.3" proved="true">
        <proof prover="2"><result status="valid" time="0.51"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.1.0.1.4" proved="true">
        <proof prover="2"><result status="valid" time="0.21"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.1.0.1.5" proved="true">
        <proof prover="2"><result status="valid" time="0.17"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_edge" proved="true">
 <proof prover="2"><result status="valid" time="0.08"/></proof>
 </goal>
 <goal name="path_edge_snoc" proved="true">
 <proof prover="2"><result status="valid" time="0.14"/></proof>
 </goal>
 <goal name="unique_path_pairwise&#39;vc" expl="VC for unique_path_pairwise" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="unique_path_pairwise&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.13"/></proof>
  </goal>
  <goal name="unique_path_pairwise&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="unique_path_pairwise&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.45"/></proof>
  </goal>
  <goal name="unique_path_pairwise&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.45"/></proof>
  </goal>
  <goal name="unique_path_pairwise&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="unique_path_pairwise&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="unique_path_pairwise&#39;vc.6" expl="loop invariant preservation" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="unique_path_pairwise&#39;vc.7" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="1"><result status="valid" time="1.74" steps="1730"/></proof>
  </goal>
  <goal name="unique_path_pairwise&#39;vc.8" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="2.22" steps="1840"/></proof>
  </goal>
  <goal name="unique_path_pairwise&#39;vc.9" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="1"><result status="valid" time="0.27" steps="437"/></proof>
  </goal>
  <goal name="unique_path_pairwise&#39;vc.10" expl="assertion" proved="true">
  <proof prover="0" timelimit="1"><result status="valid" time="0.09" steps="188"/></proof>
  </goal>
  <goal name="unique_path_pairwise&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="unique_path_pairwise&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="unique_path_pairwise&#39;vc.13" expl="out of loop bounds" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.17"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="unique_path_equal">
 </goal>
 <goal name="unique_path_ext" proved="true">
 <proof prover="2" timelimit="1"><result status="valid" time="0.23"/></proof>
 </goal>
 <goal name="unique_path" proved="true">
 <proof prover="2"><result status="valid" time="0.12"/></proof>
 </goal>
 <goal name="state&#39;vc" expl="VC for state" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="state&#39;vc.0" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="state&#39;vc.0.0" expl="type invariant" proved="true">
   <proof prover="2"><result status="valid" time="0.09"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="state&#39;vc.1" expl="type invariant" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="state&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="state&#39;vc.3" expl="type invariant" proved="true">
  <transf name="unfold" proved="true" arg1="reachable">
   <goal name="state&#39;vc.3.0" expl="VC for state" proved="true">
   <transf name="exists" proved="true" arg1="(empty: seq elt)">
    <goal name="state&#39;vc.3.0.0" proved="true">
    <proof prover="2" timelimit="1"><result status="valid" time="0.13"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="state&#39;vc.4" expl="type invariant" proved="true">
  <transf name="unfold" proved="true" arg1="reachable">
   <goal name="state&#39;vc.4.0" expl="type invariant" proved="true">
   <proof prover="3"><result status="valid" time="0.09"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="new_element" proved="true">
 <proof prover="2"><result status="valid" time="0.65"/></proof>
 </goal>
 <goal name="parent_move" proved="true">
 <proof prover="2" timelimit="1"><result status="valid" time="0.23"/></proof>
 </goal>
 <goal name="move_lemma">
 <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <transf name="split_vc" >
  <goal name="move_lemma.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <transf name="case" arg1="(x = (root s))">
   <goal name="move_lemma.0.0" expl="true case" proved="true">
   <proof prover="2" timelimit="1"><result status="valid" time="0.16"/></proof>
   </goal>
   <goal name="move_lemma.0.1" expl="false case">
   <proof prover="0" timelimit="1"><result status="timeout" time="1.00"/></proof>
   <proof prover="1" timelimit="1"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" timelimit="1"><result status="timeout" time="1.00"/></proof>
   <transf name="unfold" arg1="path">
    <goal name="move_lemma.0.1.0">
    <transf name="introduce_premises" >
     <goal name="move_lemma.0.1.0.0">
     <transf name="right" >
      <goal name="move_lemma.0.1.0.0.0" expl="right case">
      <transf name="split_vc" >
       <goal name="move_lemma.0.1.0.0.0.0" expl="right case" proved="true">
       <proof prover="2" timelimit="1"><result status="valid" time="0.19"/></proof>
       </goal>
       <goal name="move_lemma.0.1.0.0.0.1" expl="right case" proved="true">
       <proof prover="2" timelimit="1"><result status="valid" time="0.19"/></proof>
       </goal>
       <goal name="move_lemma.0.1.0.0.0.2" expl="right case">
       <proof prover="0"><result status="timeout" time="5.00"/></proof>
       <proof prover="1"><result status="timeout" time="5.00"/></proof>
       <proof prover="2"><result status="timeout" time="5.00"/></proof>
       </goal>
       <goal name="move_lemma.0.1.0.0.0.3" expl="right case" proved="true">
       <proof prover="2" timelimit="1"><result status="valid" time="0.11"/></proof>
       </goal>
       <goal name="move_lemma.0.1.0.0.0.4" expl="right case">
       <proof prover="0"><result status="timeout" time="5.00"/></proof>
       <proof prover="1"><result status="timeout" time="5.00"/></proof>
       <proof prover="2"><result status="timeout" time="5.00"/></proof>
       </goal>
       <goal name="move_lemma.0.1.0.0.0.5" expl="right case" proved="true">
       <proof prover="2" timelimit="1"><result status="valid" time="0.18"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="none_intermediate_reachability">
 <proof prover="0" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="1" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" >
  <goal name="none_intermediate_reachability.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="up_reach">
 <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="6" obsolete="true"><result status="timeout" time="1.00" steps="97365"/></proof>
 <transf name="split_vc" >
  <goal name="up_reach.0">
  </goal>
 </transf>
 </goal>
 <goal name="add&#39;vc" expl="VC for add">
 <transf name="split_vc" >
  <goal name="add&#39;vc.0" expl="type invariant" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.10"/></proof>
  <proof prover="7"><result status="valid" time="0.12" steps="21398"/></proof>
  </goal>
  <goal name="add&#39;vc.1" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.13"/></proof>
  <proof prover="7"><result status="valid" time="0.15" steps="19418"/></proof>
  </goal>
  <goal name="add&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="add&#39;vc.3" expl="type invariant">
  <proof prover="2"><result status="timeout" time="5.00"/></proof>
  <proof prover="7"><result status="timeout" time="0.56" steps="60928"/></proof>
  </goal>
  <goal name="add&#39;vc.4" expl="type invariant">
  <transf name="split_vc" >
   <goal name="add&#39;vc.4.0" expl="type invariant">
   <transf name="case" arg1="(x = n)">
    <goal name="add&#39;vc.4.0.0" expl="true case (type invariant)">
    <transf name="unfold" arg1="reachable">
     <goal name="add&#39;vc.4.0.0.0" expl="true case (type invariant)">
     <transf name="assert" arg1="(reachable (tree s1) p (root s1))">
      <goal name="add&#39;vc.4.0.0.0.0" expl="asserted formula">
      <transf name="unfold" arg1="reachable" arg2="in" arg3="h">
       <goal name="add&#39;vc.4.0.0.0.0.0">
       <transf name="introduce_exists" >
        <goal name="add&#39;vc.4.0.0.0.0.0.0">
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="add&#39;vc.4.0.0.0.1" expl="true case (type invariant)">
      <proof prover="2"><result status="timeout" time="5.00"/></proof>
      <proof prover="7"><result status="timeout" time="1.00" steps="104905"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="add&#39;vc.4.0.1" expl="false case (type invariant)">
    <transf name="assert" arg1="(reachable (tree s1) x (root s1))">
     <goal name="add&#39;vc.4.0.1.0" expl="asserted formula">
     <transf name="unfold" arg1="reachable" arg2="in" arg3="h">
      <goal name="add&#39;vc.4.0.1.0.0">
      <transf name="introduce_exists" >
       <goal name="add&#39;vc.4.0.1.0.0.0">
       <transf name="unfold" arg1="reachable">
        <goal name="add&#39;vc.4.0.1.0.0.0.0">
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="add&#39;vc.4.0.1.1" expl="false case (type invariant)">
     <proof prover="2"><result status="timeout" time="5.00"/></proof>
     <proof prover="7"><result status="timeout" time="0.52" steps="84652"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="add&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  <proof prover="7"><result status="valid" time="0.08" steps="18217"/></proof>
  </goal>
  <goal name="add&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  <proof prover="7"><result status="valid" time="0.06" steps="19226"/></proof>
  </goal>
  <goal name="add&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.10"/></proof>
  <proof prover="7"><result status="valid" time="0.10" steps="18121"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="remove&#39;vc" expl="VC for remove" proved="true">
 <proof prover="2" timelimit="1"><result status="valid" time="0.16"/></proof>
 </goal>
 <goal name="move&#39;vc" expl="VC for move">
 <transf name="split_vc" >
  <goal name="move&#39;vc.0" expl="type invariant" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.14"/></proof>
  <proof prover="7"><result status="valid" time="0.13" steps="21254"/></proof>
  </goal>
  <goal name="move&#39;vc.1" expl="type invariant" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="move&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.15"/></proof>
  <proof prover="7"><result status="valid" time="0.11" steps="22029"/></proof>
  </goal>
  <goal name="move&#39;vc.3" expl="type invariant">
  <proof prover="0"><result status="timeout" time="5.00"/></proof>
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="timeout" time="5.00"/></proof>
  <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="7"><result status="timeout" time="2.00" steps="148714"/></proof>
  </goal>
  <goal name="move&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="2.03"/></proof>
  </goal>
  <goal name="move&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.11"/></proof>
  <proof prover="7"><result status="valid" time="0.07" steps="18996"/></proof>
  </goal>
  <goal name="move&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.14"/></proof>
  <proof prover="7"><result status="valid" time="0.11" steps="18151"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
