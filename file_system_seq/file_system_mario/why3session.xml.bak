<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.3.1" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="4.8.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.7" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="Eprover" version="2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="Alt-Ergo" version="2.3.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="file_system_mario.mlw"/>
<theory name="FileSystem">
 <goal name="append_empty" proved="true">
 <proof prover="2" timelimit="1"><result status="valid" time="0.08"/></proof>
 </goal>
 <goal name="empty_length" proved="true">
 <proof prover="2"><result status="valid" time="0.12"/></proof>
 </goal>
 <goal name="trans_path" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="trans_path.0" proved="true">
  <transf name="unfold" proved="true" arg1="path">
   <goal name="trans_path.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="trans_path.0.0.0" proved="true">
    <transf name="case" proved="true" arg1="(length pth1 = 0)">
     <goal name="trans_path.0.0.0.0" expl="true case" proved="true">
     <transf name="case" proved="true" arg1="(length pth2 = 0)">
      <goal name="trans_path.0.0.0.0.0" expl="true case" proved="true">
      <proof prover="2"><result status="valid" time="0.12"/></proof>
      </goal>
      <goal name="trans_path.0.0.0.0.1" expl="false case (true case)" proved="true">
      <transf name="right" proved="true" >
       <goal name="trans_path.0.0.0.0.1.0" expl="right case" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="trans_path.0.0.0.0.1.0.0" proved="true">
        <proof prover="2"><result status="valid" time="0.15"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.0.1.0.1" proved="true">
        <proof prover="2"><result status="valid" time="0.19"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.0.1.0.2" proved="true">
        <proof prover="2"><result status="valid" time="0.30"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.0.1.0.3" proved="true">
        <proof prover="2"><result status="valid" time="0.22"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.0.1.0.4" proved="true">
        <proof prover="2"><result status="valid" time="0.17"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.0.1.0.5" proved="true">
        <proof prover="2"><result status="valid" time="0.14"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="trans_path.0.0.0.1" expl="false case" proved="true">
     <transf name="right" proved="true" >
      <goal name="trans_path.0.0.0.1.0" expl="right case" proved="true">
      <transf name="case" proved="true" arg1="(length pth2 = 0)">
       <goal name="trans_path.0.0.0.1.0.0" expl="right case (true case)" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="trans_path.0.0.0.1.0.0.0" proved="true">
        <proof prover="2"><result status="valid" time="0.14"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.1.0.0.1" proved="true">
        <proof prover="2"><result status="valid" time="0.13"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.1.0.0.2" proved="true">
        <transf name="replace" proved="true" arg1="(pth1 ++ pth2)" arg2="pth1">
         <goal name="trans_path.0.0.0.1.0.0.2.0" proved="true">
         <transf name="unfold" proved="true" arg1="path" arg2="in" arg3="H3">
          <goal name="trans_path.0.0.0.1.0.0.2.0.0" proved="true">
          <transf name="eliminate_let_fmla" proved="true" >
           <goal name="trans_path.0.0.0.1.0.0.2.0.0.0" proved="true">
           <transf name="destruct" proved="true" arg1="H3">
            <goal name="trans_path.0.0.0.1.0.0.2.0.0.0.0" proved="true">
            <transf name="replace" proved="true" arg1="until" arg2="middle">
             <goal name="trans_path.0.0.0.1.0.0.2.0.0.0.0.0" proved="true">
             <transf name="unfold" proved="true" arg1="path" arg2="in" arg3="H4">
              <goal name="trans_path.0.0.0.1.0.0.2.0.0.0.0.0.0" proved="true">
              <transf name="assert" proved="true" arg1="(length pth1 = n)">
               <goal name="trans_path.0.0.0.1.0.0.2.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
               <proof prover="2"><result status="valid" time="0.15"/></proof>
               </goal>
               <goal name="trans_path.0.0.0.1.0.0.2.0.0.0.0.0.0.1" proved="true">
               <proof prover="2"><result status="valid" time="0.11"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="trans_path.0.0.0.1.0.0.2.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="2"><result status="valid" time="0.07"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="trans_path.0.0.0.1.0.0.2.0.0.0.1" proved="true">
            <proof prover="2"><result status="valid" time="0.07"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="trans_path.0.0.0.1.0.0.2.1" expl="equality hypothesis" proved="true">
         <transf name="assert" proved="true" arg1="(pth2 = empty)">
          <goal name="trans_path.0.0.0.1.0.0.2.1.0" expl="asserted formula" proved="true">
          <proof prover="2"><result status="valid" time="0.12"/></proof>
          </goal>
          <goal name="trans_path.0.0.0.1.0.0.2.1.1" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="0.09"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="trans_path.0.0.0.1.0.0.3" proved="true">
        <proof prover="2"><result status="valid" time="0.23"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.1.0.0.4" proved="true">
        <proof prover="2"><result status="valid" time="0.16"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.1.0.0.5" proved="true">
        <proof prover="2"><result status="valid" time="0.15"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="trans_path.0.0.0.1.0.1" expl="right case (false case)" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="trans_path.0.0.0.1.0.1.0" proved="true">
        <proof prover="2"><result status="valid" time="0.14"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.1.0.1.1" proved="true">
        <proof prover="2"><result status="valid" time="0.14"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.1.0.1.2" proved="true">
        <proof prover="2"><result status="valid" time="1.92"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.1.0.1.3" proved="true">
        <proof prover="2"><result status="valid" time="0.51"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.1.0.1.4" proved="true">
        <proof prover="2"><result status="valid" time="0.21"/></proof>
        </goal>
        <goal name="trans_path.0.0.0.1.0.1.5" proved="true">
        <proof prover="2"><result status="valid" time="0.17"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_edge" proved="true">
 <proof prover="2"><result status="valid" time="0.08"/></proof>
 </goal>
 <goal name="path_edge_snoc" proved="true">
 <proof prover="2"><result status="valid" time="0.14"/></proof>
 </goal>
 <goal name="unique_path_ext">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="5.00"/></proof>
 </goal>
 <goal name="unique_path" proved="true">
 <proof prover="2"><result status="valid" time="0.12"/></proof>
 </goal>
 <goal name="state&#39;vc" expl="VC for state" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="state&#39;vc.0" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="state&#39;vc.0.0" expl="type invariant" proved="true">
   <transf name="assert" proved="true" arg1="(n = root)">
    <goal name="state&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.06"/></proof>
    </goal>
    <goal name="state&#39;vc.0.0.1" expl="type invariant" proved="true">
    <transf name="assert" proved="true" arg1="(forall y. mem1 y dom -&gt; y = n)">
     <goal name="state&#39;vc.0.0.1.0" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="0.10"/></proof>
     </goal>
     <goal name="state&#39;vc.0.0.1.1" expl="type invariant" proved="true">
     <proof prover="2"><result status="valid" time="0.10"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="state&#39;vc.1" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="state&#39;vc.1.0" expl="type invariant" proved="true">
   <proof prover="2"><result status="valid" time="0.09"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="state&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="state&#39;vc.3" expl="type invariant" proved="true">
  <transf name="unfold" proved="true" arg1="reachable">
   <goal name="state&#39;vc.3.0" expl="VC for state" proved="true">
   <proof prover="3"><result status="valid" time="0.09"/></proof>
   <transf name="exists" proved="true" arg1="(empty: seq elt)">
    <goal name="state&#39;vc.3.0.0" proved="true">
    <proof prover="2"><result status="valid" time="0.09"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="new_element" proved="true">
 <proof prover="2"><result status="valid" time="0.45"/></proof>
 </goal>
 <goal name="parent_move" proved="true">
 <proof prover="2" timelimit="1"><result status="valid" time="0.23"/></proof>
 </goal>
 <goal name="move_lemma">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="1" obsolete="true"><result status="highfailure" time="0.70"/></proof>
 <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" >
  <goal name="move_lemma.0">
  <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add&#39;vc" expl="VC for add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add&#39;vc.0" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="add&#39;vc.1" expl="type invariant" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="add&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="add&#39;vc.3" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="add&#39;vc.3.0" expl="type invariant" proved="true">
   <transf name="case" proved="true" arg1="(x = n)">
    <goal name="add&#39;vc.3.0.0" expl="true case (type invariant)" proved="true">
    <transf name="unfold" proved="true" arg1="reachable">
     <goal name="add&#39;vc.3.0.0.0" expl="VC for add" proved="true">
     <transf name="assert" proved="true" arg1="(reachable (tree s1) p (root s1))">
      <goal name="add&#39;vc.3.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="2"><result status="valid" time="0.17"/></proof>
      </goal>
      <goal name="add&#39;vc.3.0.0.0.1" expl="VC for add" proved="true">
      <transf name="unfold" proved="true" arg1="reachable" arg2="in" arg3="h">
       <goal name="add&#39;vc.3.0.0.0.1.0" expl="VC for add" proved="true">
       <transf name="introduce_exists" proved="true" >
        <goal name="add&#39;vc.3.0.0.0.1.0.0" expl="VC for add" proved="true">
        <transf name="exists" proved="true" arg1="(cons x p)">
         <goal name="add&#39;vc.3.0.0.0.1.0.0.0" proved="true">
         <transf name="unfold" proved="true" arg1="path">
          <goal name="add&#39;vc.3.0.0.0.1.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="add&#39;vc.3.0.0.0.1.0.0.0.0.0" proved="true">
           <transf name="right" proved="true" >
            <goal name="add&#39;vc.3.0.0.0.1.0.0.0.0.0.0" expl="right case" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="add&#39;vc.3.0.0.0.1.0.0.0.0.0.0.0" expl="right case" proved="true">
             <proof prover="2"><result status="valid" time="0.18"/></proof>
             </goal>
             <goal name="add&#39;vc.3.0.0.0.1.0.0.0.0.0.0.1" expl="right case" proved="true">
             <proof prover="2"><result status="valid" time="0.17"/></proof>
             </goal>
             <goal name="add&#39;vc.3.0.0.0.1.0.0.0.0.0.0.2" expl="right case" proved="true">
             <proof prover="0"><result status="valid" time="0.16" steps="421"/></proof>
             </goal>
             <goal name="add&#39;vc.3.0.0.0.1.0.0.0.0.0.0.3" expl="right case" proved="true">
             <proof prover="0"><result status="valid" time="0.21" steps="411"/></proof>
             <proof prover="2"><result status="valid" time="1.97"/></proof>
             </goal>
             <goal name="add&#39;vc.3.0.0.0.1.0.0.0.0.0.0.4" expl="right case" proved="true">
             <proof prover="2"><result status="valid" time="0.53"/></proof>
             </goal>
             <goal name="add&#39;vc.3.0.0.0.1.0.0.0.0.0.0.5" expl="right case" proved="true">
             <proof prover="2"><result status="valid" time="0.24"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="add&#39;vc.3.0.1" expl="false case (type invariant)" proved="true">
    <transf name="assert" proved="true" arg1="(reachable (tree s1) x (root s1))">
     <goal name="add&#39;vc.3.0.1.0" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="0.18"/></proof>
     </goal>
     <goal name="add&#39;vc.3.0.1.1" expl="false case (type invariant)" proved="true">
     <transf name="unfold" proved="true" arg1="reachable" arg2="in" arg3="h">
      <goal name="add&#39;vc.3.0.1.1.0" expl="false case (type invariant)" proved="true">
      <transf name="introduce_exists" proved="true" >
       <goal name="add&#39;vc.3.0.1.1.0.0" expl="false case (type invariant)" proved="true">
       <transf name="unfold" proved="true" arg1="reachable">
        <goal name="add&#39;vc.3.0.1.1.0.0.0" expl="VC for add" proved="true">
        <transf name="exists" proved="true" arg1="p">
         <goal name="add&#39;vc.3.0.1.1.0.0.0.0" proved="true">
         <proof prover="2"><result status="valid" time="0.16"/></proof>
         <proof prover="4"><result status="valid" time="0.05" steps="62"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="add&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="add&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="add&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="remove&#39;vc" expl="VC for remove" proved="true">
 <proof prover="2" timelimit="1"><result status="valid" time="0.16"/></proof>
 </goal>
 <goal name="move&#39;vc" expl="VC for move">
 <transf name="split_vc" >
  <goal name="move&#39;vc.0" expl="type invariant" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="move&#39;vc.1" expl="type invariant" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="move&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="move&#39;vc.3" expl="type invariant">
  <transf name="case" arg1="(x = c)">
   <goal name="move&#39;vc.3.0" expl="true case (type invariant)" proved="true">
   <transf name="assert" proved="true" arg1="(reachable (tree s1) np (root s1))">
    <goal name="move&#39;vc.3.0.0" expl="asserted formula" proved="true">
    <proof prover="2" timelimit="1"><result status="valid" time="0.14"/></proof>
    </goal>
    <goal name="move&#39;vc.3.0.1" expl="true case (type invariant)" proved="true">
    <transf name="unfold" proved="true" arg1="reachable" arg2="in" arg3="h">
     <goal name="move&#39;vc.3.0.1.0" expl="true case (type invariant)" proved="true">
     <transf name="introduce_exists" proved="true" >
      <goal name="move&#39;vc.3.0.1.0.0" expl="true case (type invariant)" proved="true">
      <transf name="instantiate" proved="true" arg1="trans_path" arg2="c,np">
       <goal name="move&#39;vc.3.0.1.0.0.0" expl="true case (type invariant)" proved="true">
       <transf name="instantiate" proved="true" arg1="Hinst" arg2="(root s1)">
        <goal name="move&#39;vc.3.0.1.0.0.0.0" expl="true case (type invariant)" proved="true">
        <transf name="instantiate" proved="true" arg1="Hinst" arg2="(set1 (tree s1) c np)">
         <goal name="move&#39;vc.3.0.1.0.0.0.0.0" expl="true case (type invariant)" proved="true">
         <transf name="instantiate" proved="true" arg1="Hinst" arg2="(singleton c)">
          <goal name="move&#39;vc.3.0.1.0.0.0.0.0.0" expl="true case (type invariant)" proved="true">
          <transf name="instantiate" proved="true" arg1="Hinst" arg2="p">
           <goal name="move&#39;vc.3.0.1.0.0.0.0.0.0.0" expl="true case (type invariant)" proved="true">
           <proof prover="2"><result status="valid" time="1.12"/></proof>
           <transf name="remove" arg1="zero,one,(-),(&gt;),(&lt;=),(&gt;=),get1,set1,([]&#39;),([&lt;-]&#39;),(==&#39;),subset,is_empty,singleton1,disjoint,([]),cons,snoc,(++),mem,distinct,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,extensionality,subset_refl,subset_trans,is_empty_empty,empty_is_empty,add_def,mem_singleton,remove_def,add_remove,remove_add,subset_remove,union_def,subset_union_1,subset_union_2,inter_def,subset_inter_1,subset_inter_2,diff_def,subset_diff,pick_def,disjoint_inter_empty,disjoint_diff_eq,disjoint_diff_s2,filter_def,subset_filter,map_def,mem_map,cardinal_nonneg,cardinal_empty,cardinal_add,cardinal_remove,cardinal_subset,subset_eq,cardinal1,cardinal_union,cardinal_inter_disjoint,cardinal_diff,cardinal_filter,cardinal_map,length_nonnegative,(==)&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,mem_append,mem_tail,append_empty,empty_length,path_edge_snoc,unique_path_ext,unique_path,state&#39;invariant,new_element,parent_move,H3,Requires7,Requires6,Requires5,Requires2,Requires1,H1,LoopInvariant2,LoopInvariant,H,Hinst4,Hinst3,Hinst2,Hinst1">
            <goal name="move&#39;vc.3.0.1.0.0.0.0.0.0.0.0" expl="true case (type invariant)">
            <proof prover="2" timelimit="1"><result status="timeout" time="2.00"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="move&#39;vc.3.1" expl="false case (type invariant)">
   <transf name="case" arg1="(reachable (tree s1) x c)">
    <goal name="move&#39;vc.3.1.0" expl="false case (true case. type invariant)">
    <transf name="unfold" arg1="reachable" arg2="in" arg3="h">
     <goal name="move&#39;vc.3.1.0.0" expl="false case (true case. type invariant)">
     <transf name="introduce_exists" >
      <goal name="move&#39;vc.3.1.0.0.0" expl="false case (true case. type invariant)">
      <transf name="assert" arg1="(reachable (tree s1) np (root s1))">
       <goal name="move&#39;vc.3.1.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="2" timelimit="1"><result status="valid" time="0.12"/></proof>
       </goal>
       <goal name="move&#39;vc.3.1.0.0.0.1" expl="false case (true case. type invariant)">
       <transf name="unfold" arg1="reachable" arg2="in" arg3="h">
        <goal name="move&#39;vc.3.1.0.0.0.1.0" expl="false case (true case. type invariant)">
        <transf name="introduce_exists" >
         <goal name="move&#39;vc.3.1.0.0.0.1.0.0" expl="false case (true case. type invariant)">
         <transf name="instantiate" arg1="parent_move" arg2="x,c,np">
          <goal name="move&#39;vc.3.1.0.0.0.1.0.0.0" expl="false case (true case. type invariant)">
          <transf name="instantiate" arg1="Hinst" arg2="(tree s1)">
           <goal name="move&#39;vc.3.1.0.0.0.1.0.0.0.0" expl="false case (true case. type invariant)">
           <transf name="instantiate" arg1="Hinst" arg2="p1">
            <goal name="move&#39;vc.3.1.0.0.0.1.0.0.0.0.0" expl="false case (true case. type invariant)">
            <transf name="destruct_rec" arg1="Hinst">
             <goal name="move&#39;vc.3.1.0.0.0.1.0.0.0.0.0.0" expl="destruct premise" proved="true">
             <proof prover="2" timelimit="1"><result status="valid" time="0.16"/></proof>
             </goal>
             <goal name="move&#39;vc.3.1.0.0.0.1.0.0.0.0.0.1" expl="destruct premise" proved="true">
             <proof prover="2" timelimit="1"><result status="valid" time="0.10"/></proof>
             </goal>
             <goal name="move&#39;vc.3.1.0.0.0.1.0.0.0.0.0.2" expl="destruct premise" proved="true">
             <proof prover="2" timelimit="1"><result status="valid" time="0.08"/></proof>
             </goal>
             <goal name="move&#39;vc.3.1.0.0.0.1.0.0.0.0.0.3" expl="destruct premise" proved="true">
             <proof prover="2" timelimit="1"><result status="valid" time="0.10"/></proof>
             </goal>
             <goal name="move&#39;vc.3.1.0.0.0.1.0.0.0.0.0.4" expl="destruct premise" proved="true">
             <proof prover="2" timelimit="1"><result status="valid" time="0.09"/></proof>
             </goal>
             <goal name="move&#39;vc.3.1.0.0.0.1.0.0.0.0.0.5" expl="destruct premise" proved="true">
             <proof prover="0"><result status="valid" time="0.35" steps="787"/></proof>
             <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
             </goal>
             <goal name="move&#39;vc.3.1.0.0.0.1.0.0.0.0.0.6" expl="destruct premise">
             <proof prover="0" obsolete="true"><result status="timeout" time="1.00"/></proof>
             <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
             <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
             </goal>
             <goal name="move&#39;vc.3.1.0.0.0.1.0.0.0.0.0.7" expl="false case (true case. type invariant)">
             <transf name="instantiate" arg1="trans_path" arg2="x,np,(s1.root)">
              <goal name="move&#39;vc.3.1.0.0.0.1.0.0.0.0.0.7.0" expl="false case (true case. type invariant)">
              <transf name="instantiate" arg1="Hinst" arg2="(set1 (tree s1) c np)">
               <goal name="move&#39;vc.3.1.0.0.0.1.0.0.0.0.0.7.0.0" expl="false case (true case. type invariant)">
               <transf name="instantiate" arg1="Hinst" arg2="(p1 ++ (singleton c)),p">
                <goal name="move&#39;vc.3.1.0.0.0.1.0.0.0.0.0.7.0.0.0" expl="false case (true case. type invariant)">
                <transf name="destruct_rec" arg1="Hinst">
                 <goal name="move&#39;vc.3.1.0.0.0.1.0.0.0.0.0.7.0.0.0.0" expl="destruct premise">
                 <proof prover="0"><result status="timeout" time="1.00"/></proof>
                 <proof prover="1"><result status="highfailure" time="0.50"/></proof>
                 <proof prover="2" timelimit="1"><result status="timeout" time="1.00"/></proof>
                 </goal>
                 <goal name="move&#39;vc.3.1.0.0.0.1.0.0.0.0.0.7.0.0.0.1" expl="destruct premise" proved="true">
                 <proof prover="2" timelimit="1"><result status="valid" time="0.19"/></proof>
                 </goal>
                 <goal name="move&#39;vc.3.1.0.0.0.1.0.0.0.0.0.7.0.0.0.2" expl="destruct premise">
                 <proof prover="0"><result status="timeout" time="1.00"/></proof>
                 <proof prover="1"><result status="timeout" time="1.00"/></proof>
                 <proof prover="2" timelimit="1"><result status="timeout" time="1.00"/></proof>
                 </goal>
                 <goal name="move&#39;vc.3.1.0.0.0.1.0.0.0.0.0.7.0.0.0.3" expl="destruct premise" proved="true">
                 <proof prover="0"><result status="valid" time="0.33" steps="571"/></proof>
                 <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
                 </goal>
                 <goal name="move&#39;vc.3.1.0.0.0.1.0.0.0.0.0.7.0.0.0.4" expl="destruct premise">
                 <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
                 <proof prover="1" timelimit="5" obsolete="true"><result status="highfailure" time="4.12"/></proof>
                 <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
                 <transf name="split_vc" >
                  <goal name="move&#39;vc.3.1.0.0.0.1.0.0.0.0.0.7.0.0.0.4.0" expl="destruct premise">
                  <proof prover="0"><result status="timeout" time="1.00"/></proof>
                  <proof prover="1"><result status="highfailure" time="0.64"/></proof>
                  <proof prover="2" timelimit="1"><result status="timeout" time="1.00"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="move&#39;vc.3.1.0.0.0.1.0.0.0.0.0.7.0.0.0.5" expl="false case (true case. type invariant)" proved="true">
                 <proof prover="2" timelimit="1"><result status="valid" time="0.14"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="move&#39;vc.3.1.1" expl="false case (type invariant)" proved="true">
    <transf name="assert" proved="true" arg1="(reachable (tree s1) x (root s1))">
     <goal name="move&#39;vc.3.1.1.0" expl="asserted formula" proved="true">
     <proof prover="2" timelimit="1"><result status="valid" time="0.14"/></proof>
     </goal>
     <goal name="move&#39;vc.3.1.1.1" expl="false case (type invariant)" proved="true">
     <transf name="unfold" proved="true" arg1="reachable" arg2="in" arg3="h">
      <goal name="move&#39;vc.3.1.1.1.0" expl="false case (type invariant)" proved="true">
      <transf name="introduce_exists" proved="true" >
       <goal name="move&#39;vc.3.1.1.1.0.0" expl="false case (type invariant)" proved="true">
       <transf name="unfold" proved="true" arg1="reachable">
        <goal name="move&#39;vc.3.1.1.1.0.0.0" expl="VC for move" proved="true">
        <transf name="exists" proved="true" arg1="p">
         <goal name="move&#39;vc.3.1.1.1.0.0.0.0" proved="true">
         <proof prover="2" timelimit="1"><result status="valid" time="0.14"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="move&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="move&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.11"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
