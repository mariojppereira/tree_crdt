<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.8.4" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<file>
<path name=".."/>
<path name="file_system.mlw"/>
<theory name="FileSystem">
 <goal name="VC trans_path" expl="VC for trans_path" proved="true">
 <proof prover="2"><result status="valid" time="0.11"/></proof>
 </goal>
 <goal name="path_edge" proved="true">
 <proof prover="2"><result status="valid" time="0.15"/></proof>
 </goal>
 <goal name="path_edge_cons" proved="true">
 <proof prover="2"><result status="valid" time="0.07"/></proof>
 </goal>
 <goal name="VC aux" expl="VC for aux" proved="true">
 <transf name="split_all_full" proved="true" >
  <goal name="VC aux.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.09"/></proof>
  </goal>
  <goal name="VC aux.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC aux.1.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.15"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC aux.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.11"/></proof>
  </goal>
  <goal name="VC aux.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC aux.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="VC aux.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC aux.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.52"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC state" expl="VC for state" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="1" obsolete="true"><result status="highfailure" time="0.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="VC state.0" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.08"/></proof>
  </goal>
  <goal name="VC state.1" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC state.2" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC state.3" expl="type invariant" proved="true">
  <transf name="unfold" proved="true" arg1="reachable">
   <goal name="VC state.3.0" expl="VC for state" proved="true">
   <transf name="exists" proved="true" arg1="(Cons x Nil)">
    <goal name="VC state.3.0.0" proved="true">
    <proof prover="2"><result status="valid" time="0.08"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC add" expl="VC for add" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="1" obsolete="true"><result status="highfailure" time="0.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="VC add.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="VC add.1" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="reachable">
   <goal name="VC add.1.0" expl="VC for add" proved="true">
   <transf name="case" proved="true" arg1="(x = n)">
    <goal name="VC add.1.0.0" expl="true case" proved="true">
    <proof prover="2"><result status="valid" time="0.06"/></proof>
    </goal>
    <goal name="VC add.1.0.1" expl="false case" proved="true">
    <transf name="assert" proved="true" arg1="(forall y. mem y (dom s) -&gt; reachable (tree s) y (root s) )">
     <goal name="VC add.1.0.1.0" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="0.09"/></proof>
     </goal>
     <goal name="VC add.1.0.1.1" expl="false case" proved="true">
     <transf name="instantiate" proved="true" arg1="h" arg2="x">
      <goal name="VC add.1.0.1.1.0" expl="false case" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="VC add.1.0.1.1.0.0" expl="destruct premise" proved="true">
       <proof prover="2"><result status="valid" time="0.04"/></proof>
       </goal>
       <goal name="VC add.1.0.1.1.0.1" expl="false case" proved="true">
       <transf name="unfold" proved="true" arg1="reachable" arg2="in" arg3="Hinst">
        <goal name="VC add.1.0.1.1.0.1.0" expl="false case" proved="true">
        <transf name="introduce_exists" proved="true" >
         <goal name="VC add.1.0.1.1.0.1.0.0" expl="false case" proved="true">
         <transf name="instantiate" proved="true" arg1="aux" arg2="n,x,p1,(root s),(tree s),p">
          <goal name="VC add.1.0.1.1.0.1.0.0.0" expl="false case" proved="true">
          <transf name="destruct" proved="true" arg1="Hinst">
           <goal name="VC add.1.0.1.1.0.1.0.0.0.0" expl="destruct premise" proved="true">
           <proof prover="2"><result status="valid" time="0.04"/></proof>
           </goal>
           <goal name="VC add.1.0.1.1.0.1.0.0.0.1" expl="false case" proved="true">
           <transf name="destruct" proved="true" arg1="Hinst">
            <goal name="VC add.1.0.1.1.0.1.0.0.0.1.0" expl="destruct premise" proved="true">
            <proof prover="2"><result status="valid" time="0.04"/></proof>
            </goal>
            <goal name="VC add.1.0.1.1.0.1.0.0.0.1.1" expl="false case" proved="true">
            <transf name="destruct" proved="true" arg1="Hinst">
             <goal name="VC add.1.0.1.1.0.1.0.0.0.1.1.0" expl="destruct premise" proved="true">
             <proof prover="2"><result status="valid" time="0.06"/></proof>
             </goal>
             <goal name="VC add.1.0.1.1.0.1.0.0.0.1.1.1" expl="false case" proved="true">
             <proof prover="2"><result status="valid" time="0.06"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC add.2" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="VC add.3" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="VC add.4" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.09"/></proof>
  </goal>
  <goal name="VC add.5" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC add.5.0" expl="type invariant" proved="true">
   <transf name="unfold" proved="true" arg1="reachable">
    <goal name="VC add.5.0.0" expl="VC for add" proved="true">
    <transf name="case" proved="true" arg1="(x = n)">
     <goal name="VC add.5.0.0.0" expl="true case" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <proof prover="1" obsolete="true"><result status="highfailure" time="0.00"/></proof>
     <proof prover="2"><result status="valid" time="0.25"/></proof>
     </goal>
     <goal name="VC add.5.0.0.1" expl="false case" proved="true">
     <transf name="case" proved="true" arg1="(x = p)">
      <goal name="VC add.5.0.0.1.0" expl="false case (true case)" proved="true">
      <proof prover="2"><result status="valid" time="0.07"/></proof>
      </goal>
      <goal name="VC add.5.0.0.1.1" expl="false case" proved="true">
      <proof prover="2"><result status="valid" time="0.10"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC add.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC add.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC add.8" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC remove" expl="VC for remove" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC remove.0" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.09"/></proof>
  </goal>
  <goal name="VC remove.1" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC remove.2" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.08"/></proof>
  </goal>
  <goal name="VC remove.3" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="VC remove.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC move" expl="VC for move">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="1" obsolete="true"><result status="highfailure" time="0.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" >
  <goal name="VC move.0" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.08"/></proof>
  </goal>
  <goal name="VC move.1" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="VC move.2" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC move.3" expl="type invariant">
  <transf name="split_vc" >
   <goal name="VC move.3.0" expl="type invariant">
   <transf name="case" arg1="(x = c)">
    <goal name="VC move.3.0.0" expl="true case (type invariant)">
    <proof prover="0"><result status="timeout" time="1.00"/></proof>
    <proof prover="1"><result status="highfailure" time="0.00"/></proof>
    <proof prover="2"><result status="timeout" time="1.00"/></proof>
    <transf name="assert" arg1="(edge c np (set (tree s1) c np))">
     <goal name="VC move.3.0.0.0" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="0.06"/></proof>
     </goal>
     <goal name="VC move.3.0.0.1" expl="true case (type invariant)">
     <proof prover="0"><result status="timeout" time="1.00"/></proof>
     <proof prover="1"><result status="highfailure" time="0.00"/></proof>
     <proof prover="2"><result status="timeout" time="1.00"/></proof>
     <transf name="unfold" arg1="reachable">
      <goal name="VC move.3.0.0.1.0" expl="VC for move">
      <transf name="assert" arg1="(reachable (set (tree s1) c np) np (root s1))">
       <goal name="VC move.3.0.0.1.0.0" expl="asserted formula">
       <proof prover="0"><result status="timeout" time="1.00"/></proof>
       <proof prover="1"><result status="highfailure" time="0.00"/></proof>
       <proof prover="2"><result status="timeout" time="1.00"/></proof>
       <transf name="assert" arg1="(reachable (tree s1) np (root s1))">
        <goal name="VC move.3.0.0.1.0.0.0" expl="asserted formula" proved="true">
        <proof prover="2"><result status="valid" time="0.06"/></proof>
        </goal>
        <goal name="VC move.3.0.0.1.0.0.1" expl="asserted formula">
        <proof prover="0"><result status="timeout" time="1.00"/></proof>
        <proof prover="1"><result status="highfailure" time="0.00"/></proof>
        <proof prover="2"><result status="timeout" time="1.00"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC move.3.0.0.1.0.1" expl="VC for move" proved="true">
       <proof prover="2"><result status="valid" time="0.11"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC move.3.0.1" expl="false case (type invariant)">
    <proof prover="0"><result status="timeout" time="1.00"/></proof>
    <proof prover="1"><result status="highfailure" time="0.00"/></proof>
    <proof prover="2"><result status="timeout" time="1.00"/></proof>
    </goal>
   </transf>
   <transf name="unfold" arg1="reachable">
    <goal name="VC move.3.0.0" expl="VC for move">
    <proof prover="0"><result status="timeout" time="1.00"/></proof>
    <proof prover="1"><result status="highfailure" time="0.00"/></proof>
    <proof prover="2"><result status="timeout" time="1.00"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC move.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC move.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
