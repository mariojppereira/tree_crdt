module FileSystem

use list.Append as A
use list.List as L
use list.Length as Le
use set.Fset
use map.Map

(* Arbitrary type for a node of our tree *)
type elt

(* Verifies if two nodes are equal *)
val equal (e1 e2 : elt) : bool
  ensures { result <-> e1 = e2 }

(* Indicates if two nodes make an edge in our tree *)
predicate edge (x y : elt) (f : elt -> elt) =
    f x = y

(* Inductive predicate to verify if there is a path from x to y *)
inductive path (f : elt -> elt) (x y : elt) (p : L.list elt) =
  | path_nil   : forall x : elt, l : elt -> elt. path l x x L.Nil
  | path_cons  : forall x y z : elt,
                 l : (elt -> elt),
                 p : L.list elt.
                 edge x z l -> path l z y p ->
                 path l x y (L.Cons x p)

(* This lemma states that if there is a path from x to y
   and if there is a path from y to z then there is a path
   from x to z *)
let rec lemma trans_path (x y z : elt) (f : elt -> elt) (p1 p2 : L.list elt)
    variant  { Le.length p1 }
    requires { path f x y p1 }
    requires { path f y z p2 }
    ensures  { path f x z (A.(++) p1 p2) }
  = match p1 with
    | L.Cons _ (L.Cons b _ as p') -> trans_path b y z f p' p2
    | _                           -> ()
    end

(* This lemma states that if there is an edge from x to y
   then that is a path from x to y *)
lemma path_edge : forall x y : elt, f : elt -> elt.
    edge x y f -> path f x y (L.Cons x L.Nil)

(* This lemma states that if there is a path from n to x
   and there is an edge from x to y then there is a path from
   n to y *)
lemma path_edge_cons:
    forall n x y : elt, f : elt -> elt, pth : L.list elt.
    path f n x pth -> edge x y f ->
    path f n y (A.(++) pth (L.Cons x L.Nil))

(* Checks if y is reachable from x *)
predicate reachable (f: elt -> elt) (x y : elt) =
    exists p : L.list elt. path f x y p
    
lemma parent_move:
   forall x c np : elt, f : elt -> elt, pth : L.list elt.
    x <> np /\ x <> c /\ c <> np  ->
    path f x c pth -> path (set f c np) x c pth

let rec lemma aux (n w p root: elt) (f: elt -> elt) (l: L.list elt)
  requires { path f w root l }
  requires { w <> n }
  requires { not (reachable f w n) }
  requires { n <> p }
  ensures  { path (set f n p) w root l }
= match l with
  | L.Nil                      -> ()
  | L.Cons _ L.Nil             -> ()
  | L.Cons w (L.Cons z _ as l) -> aux n z p root f l
  end

constant n    : elt (* constant only used for the state witness *)
constant null : elt (* null constant if necessary *)

type state = {
  mutable tree : elt -> elt;      (* mapping of the tree son -> parent *)
  mutable root : elt;             (* root of the tree *)
  mutable dom  : fset elt;        (* domain of the tree mapping function *)
}
  invariant { mem root dom }
  invariant { tree root = root }
  invariant { forall x. mem x dom ->
                mem (tree x) dom }
  invariant { forall x. mem x dom ->
                reachable tree x root }
  by { tree = (fun _ -> n); root = n; dom = singleton n }

let ghost add (n p : elt) (s : state) (ghost l: L.list elt) : unit
  requires { not mem n s.dom }
  requires { mem p s.dom }
  requires { p <> s.root /\ n <> s.root }
  requires { path s.tree p s.root l }
  requires { forall x. mem x s.dom ->
               not (reachable s.tree x n)}
  writes   { s.tree , s.dom }
  ensures  { s.tree = set (old s.tree) n p }
  ensures  { edge n p s.tree }
  ensures  { s.dom = add n (old s).dom }
=
  s.tree <- set s.tree n p;
  assert { edge n p s.tree };
  assert { forall x. mem x s.dom ->
              reachable s.tree x s.root };
  s.dom  <- add n s.dom

let ghost remove (n p : elt) (s : state) : unit
  requires { mem n s.dom }
  requires { edge n p s.tree }
  requires { forall x. s.tree x <> n }
  requires { n <> s.root }
  writes   { s.dom }
  ensures  { s.dom = remove n (old s).dom }
=
  s.dom <- remove n s.dom

let ghost move (p c np : elt) (s : state) : unit
  requires { mem p s.dom }
  requires { mem np s.dom }
  requires { mem c s.dom }
  requires { edge c p s.tree }
  requires { not (reachable s.tree np c) }
  requires { forall x. mem x s.dom ->
               reachable s.tree x s.root }
  requires { not (reachable s.tree p c) }
  requires { p <> np }
  requires { c <> np /\ c <> p }
  writes   { s.tree }
  ensures  { edge c np s.tree }
  ensures  { s.tree = set (old s.tree) c np }
=
  s.tree <- set s.tree c np;

end